using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Media;
using System.Runtime.CompilerServices;

namespace лабиринт_бот
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int x = 10;
            int y = 10;
            char[,] map = RideMap("map.txt");            

            DrowMap(map);
            while (true);
            {
                Console.Clear();
                DrowMap(map);

                Console.SetCursorPosition(x, y);
                Console.Write('@');

                ControlPlayer(ref x, ref y, map);
            }
        }

        private static char[,] RideMap(string path)
        {
            string[] file = File.ReadAllLines(path);

            char[,] map = new char[GetMaxLengtheOfLine(file), file.Length];

            for (int x = 0; x < map.GetLength(0); x++)
                for (int y = 0; y < map.GetLength(1); y++)
                    map[x, y] = file[y][x];

            return map;
        }

        private static void DrowMap(char[,] map)
        {
            for (int y = 0; y < map.GetLength(1); y++)
            {
                for (int x = 0; x < map.GetLength(0); x++)
                    Console.Write(map[x, y]);

                Console.WriteLine();
            }
        }

        static private void ControlPlayer(ref int gorisontel, ref int vertickl, char[,] map)
        {
            const ConsoleKey ComandMuveUP = ConsoleKey.W;
            const ConsoleKey ComandMuveDown = ConsoleKey.S;
            const ConsoleKey ComandMuveRight = ConsoleKey.D;
            const ConsoleKey ComandMuveULeft = ConsoleKey.A;

            int oldPositionX = gorisontel;
            int oldPositionY = vertickl;
            char wall = '#';
            ConsoleKey userKey;
            userKey = Console.ReadKey(true).Key;
            
            switch (userKey)
            {
                case ComandMuveUP:
                    vertickl -= 1;
                    break;
                case ComandMuveDown:
                    vertickl += 1;
                    break;
                case ComandMuveRight:
                    gorisontel += 1;
                    break;
                case ComandMuveULeft:
                    gorisontel -= 1;
                    break;
            }

            if (map[vertickl, gorisontel] == wall)
            {
                gorisontel = oldPositionX;
                vertickl = oldPositionY;
               
            }
        }

        private static int GetMaxLengtheOfLine(string[] lines)
        {
            int maxLength = lines[0].Length;
            foreach (var line in lines)
                if (line.Length > maxLength)
                    maxLength = line.Length;

            return maxLength;
        }

    }
   
}
