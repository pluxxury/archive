using System;
using System.Collections.Generic;
using System.IO;

namespace ConsoleApp15
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Game game = new Game();
            game.StartGame();
        }
    }

    static class Comand
    {
        public const int MoveUp = 1;
        public const int MoveDown = 2;
        public const int MoveLeft = 3;
        public const int MoveRight = 4;
        public const int Shoot = 5;

        public const ConsoleKey KeyMoveUp = ConsoleKey.UpArrow;
        public const ConsoleKey KeyMoveDown = ConsoleKey.DownArrow;
        public const ConsoleKey KeyMoveLeft = ConsoleKey.LeftArrow;
        public const ConsoleKey KeyMoveRight = ConsoleKey.RightArrow;
        public const ConsoleKey KeyShoot = ConsoleKey.Spacebar;
    }

    abstract class GameObject
    {
        protected int OldHorizontalPosition;
        protected int OldVerticalPosition;

        public int HorizontalPosition { get; protected set; }

        public int VerticalPosition { get; protected set; }

        public int Id { get; protected set; }

        public int CuntLives { get; protected set; }

        public int CountLives { get; protected set; }

        public int Direction { get; protected set; }

        public int IsLive { get; protected set; }

        public abstract void Management(int direction, bool isBatontPick);

        public abstract void DealingDamage(int damage);

        protected void ChoosingDirectionTravel(int direction, bool isBatontPick)
        {
            if (isBatontPick)
            {
                switch (direction)
                {
                    case Comand.MoveUp:
                        Move(0, -1);
                        break;

                    case Comand.MoveDown:
                        Move(0, 1);
                        break;

                    case Comand.MoveLeft:
                        Move(-1, 0);
                        break;

                    case Comand.MoveRight:
                        Move(1, 0);
                        break;
                }
            }
        }

        private void Move(int horizontalPosition, int verticalPosition)
        {
            HorizontalPosition += horizontalPosition;
            VerticalPosition += verticalPosition;
        }
    }

    abstract class Asset
    {
        abstract public char[,] GetMatrix(int direction);

        protected char[,] ReadFile(string path)
        {
            string[] file = File.ReadAllLines(path);

            char[,] map = new char[GetMaxLenghtOfLine(file), file.Length];

            for (int x = 0; x < file[0].Length; x++)
                for (int y = 0; y < file.Length - 1; y++)
                    map[x, y] = file[y][x];

            return map;
        }

        private int GetMaxLenghtOfLine(string[] lines)
        {
            int maxLenght = lines.Length;

            foreach (var line in lines)
                if (line.Length > maxLenght)
                    maxLenght = line.Length;

            return maxLenght;
        }
    }

    class Tanck : GameObject
    {
        public Tanck(int horizontalposition, int verticalposition, int direction)
        {
            HorizontalPosition = horizontalposition;
            VerticalPosition = verticalposition;
            Direction = direction;
            CuntLives = 4;
            IsLive = true;
        }

        public override void Management(int direction, bool isBatontPick)
        {
            OldHorizontalPosition = HorizontalPosition;
            OldVerticalPosition = VerticalPosition;

            if (direction == Direction)
                ChoosingDirectionTravel(direction, isBatontPick);
            else
                Direction = direction;
        }

        public override void DealingDamage(int damage)
        {
            if (CuntLives > 0)
                CuntLives -= damage;
            else
                IsLive = false;
        }
    }

    class Projectile : GameObject
    {
        public Projectile(int id, int verticalPosition, int horizontalPosition, int direction)
        {
            Id = id;
            Direction = direction;

            DetermineAppearanceCoordinate(verticalPosition, horizontalPosition, direction);

            CountLives = 1;
            IsLive = true;
        }

        public override void DealingDamage(int damage)
        {
            CountLives--;
            if (Convert.ToBoolean(damage))
                IsLive = false;
        }

        public override void Management(int direction, bool isBattonPick)
        {
            if (IsLive)
                ChoosingDirectionTravel(direction, isBattonPick);
        }

        private void AssingCoordinates(int verticalPosition, int horizontalPosition)
        {
            VerticalPosition = verticalPosition;
            HorizontalPosition = horizontalPosition;
        }

        private void DetermineAppearanceCoordinate(int verticalPosition, int horozontPosition, int direction)
        {
            int step = 1;

            switch (direction)
            {
                case Comand.MoveUp:
                    AssingCoordinates(horozontPosition - step, verticalPosition);
                    break;
                case Comand.MoveDown:
                    AssingCoordinates(horozontPosition + step, verticalPosition);
                    break;
                case Comand.MoveLeft:
                    AssingCoordinates(horozontPosition, verticalPosition - step);
                    break;
                case Comand.MoveRight:
                    AssingCoordinates(horozontPosition, verticalPosition + step);
                    break;
            }
        }
    }

    class Level : Asset
    {
        private char[,] _matrix;
        private List<char> 
        private char _charEmptyCell = ' ';

        public Level(string path)
        {
            _matrix = ReadFile(path);
            
        }
    }
}
