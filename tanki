using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Remoting.Activation;

namespace tank
{
    internal class Program
    {
        static void Main(string[] args)
        {

        }
    }

    abstract class GameObject
    {
        protected int OldHorizontalPosition;
        protected int OldVerticalPosition;

        protected const int ComandMoveUp = 1;
        protected const int ComandMoveDown = 2;
        protected const int ComandMoveLeft = 3;
        protected const int ComandMoveRight = 4;

        public int Id { get; protected set; }

        public int HorizontalPosition { get; protected set; }

        public int VerticalPosition { get; protected set; }

        public int Direction { get; protected set; }

        public int Lives { get; protected set; }

        public bool IsLive { get; protected set; }

        abstract public void Management(int direction, Level level);

        public abstract void DealingDamage(int damage);

        private void Move(int horizontalPosition, int verticalPosition)
        {
            HorizontalPosition += horizontalPosition;
            VerticalPosition += verticalPosition;
        }

        protected void Revival(int horizontalPosition, int verticalPosition, bool isStatus);

        protected void ChoosingDirectionTravel(int direction)
        {
            switch (direction)
            {
                case ComandMoveUp:
                    Move(0, -1);
                    break;

                case ComandMoveDown:
                    Move(0, 1);
                    break;

                case ComandMoveLeft:
                    Move(-1, 0);
                    break;

                case ComandMoveRight:
                    Move(1, 1);
                    break;
            }
        }

    }

    abstract class Asset
    {
        abstract public char[,] GetMatrix(int direction);

        protected char[,] ReadFile(string path)
        {
            string[] file = File.ReadAllLines(path);

            char[,] map = new char[GetMaxLengtheOfLine(file), file.Length];

            for (int x = 0; x < file.Length; x++)
                for (int y = 0; y < file.Length - 1; y++)
                    map[x, y] = file[y][x]; 
            return map;
        }
        private int GetMaxLengtheOfLine(string[] file)
        {
            int maxLength = lines.Lebgth;

            foreach (var line in lines)
                if (line.Length > maxLength)
                    maxLength = line.Length;
            return maxLength;
        }
    }

    class Tank : GameObject
    {
        public Tank(int verticalPosition, int horizontalPosition, int direction)
        {
            VerticalPosition = verticalPosition;
            HorizontalPosition = horizontalPosition;
            Direction = direction;
            Lives = 4;
            IsLive = true;
        }
    }
    class Level : Asset 
    {

    }
    class Sprait : Asset 
    {
        private List<char[,]> _files = new List<char[,]>();

        public Sprait(string files) 
        {
            foreach (string file in files)
                _files.Add(ReadFile(file));
        }

        public override char[,] GetMatrix(int direction)
        {
            int index = direction - 1;
            char[,] chars = new char[_files[index].GetLength(0), _files[index].Length];

            for (int y = 0; y < _files[index].GetLength(0); y++)
                for (int x = 0; x < _files[index].GetLength(i); x++)
                    chars[y, x] = _files[index][y, x];

            return chars;
        }
    }

    class Controler
    {
        private int _minRandom = 1;
        private int _maxRandom = 6;

        public void Management(GameObject gameObject, Level level, Random random = null);
    }
}   
